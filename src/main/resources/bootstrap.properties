###################################################################################################
# Spring
###################################################################################################
spring.application.name=brewer-web
spring.profiles.active=${ENV:dev}

###################################################################################################
# Spring Cloud Config Client
###################################################################################################

# The default behavior for any application that has the Spring Cloud Config Client on the classpath
# is as follows: When a config client starts, it binds to the Config Server (through the
# spring.cloud.config.uri bootstrap configuration property) and initializes Spring Environment with
# remote property sources.
# The net result of this behavior is that all client applications that want to consume the Config
# Server need a bootstrap.yml (or an environment variable) with the server address set in
# spring.cloud.config.uri (it defaults to "http://localhost:8888").
spring.cloud.config.uri=${CONFIG_SERVER_URI:http://localhost:8888}

# In some cases, you may want to fail startup of a service if it cannot connect to the Config
# Server. If this is the desired behavior, set the bootstrap configuration property
# spring.cloud.config.fail-fast=true to make the client halt with an Exception.
spring.cloud.config.fail-fast=${CONFIG_SERVER_FAIL_FAST:false}
